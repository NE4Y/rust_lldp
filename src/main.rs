extern crate rust_lldp;

use std::thread;
use rust_lldp::NetParser;

mod layer2;
mod tlv;

fn main() {
    /*let handle = thread::spawn(|| {
        NetParser::new().start()
    });

     */

    let b = vec![0x01, 0x80, 0xc2, 0x00, 0x00, 0x0e, 0x00, 0x04,
                 0x96, 0x1f, 0xa7, 0x26, 0x88, 0xcc, 0x02, 0x07, 0x04, 0x64, 0x60, 0x38, 0x8d, 0x73,
                 0x48, 0x04, 0x07, 0x03, 0x64, 0x60, 0x38, 0x8d,
                 0x73, 0x51, 0x06, 0x02, 0x00, 0x78, 0x08, 0x22,
                 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x3a, 0x20,
                 0x31, 0x20, 0x50, 0x6f, 0x72, 0x74, 0x3a, 0x20,
                 0x35, 0x20, 0x2d, 0x20, 0x31, 0x30, 0x2f, 0x31,
                 0x30, 0x30, 0x20, 0x4d, 0x62, 0x69, 0x74, 0x20,
                 0x54, 0x58, 0x0a, 0x11, 0x52, 0x53, 0x50, 0x45,
                 0x2d, 0x36, 0x34, 0x36, 0x30, 0x33, 0x38, 0x38,
                 0x44, 0x37, 0x33, 0x34, 0x38, 0x0c, 0x3b, 0x48,
                 0x69, 0x72, 0x73, 0x63, 0x68, 0x6d, 0x61, 0x6e,
                 0x6e, 0x20, 0x52, 0x61, 0x69, 0x6c, 0x20, 0x53,
                 0x77, 0x69, 0x74, 0x63, 0x68, 0x20, 0x50, 0x6f,
                 0x77, 0x65, 0x72, 0x20, 0x45, 0x6e, 0x68, 0x61,
                 0x6e, 0x63, 0x65, 0x64, 0x20, 0x2d, 0x20, 0x53,
                 0x57, 0x3a, 0x20, 0x48, 0x69, 0x4f, 0x53, 0x2d,
                 0x32, 0x53, 0x2d, 0x30, 0x38, 0x2e, 0x37, 0x2e,
                 0x30, 0x32, 0x0e, 0x04, 0x00, 0x04, 0x00, 0x04,
                 0x10, 0x17, 0x05, 0x01, 0xc0, 0xa8, 0x0a, 0x11,
                 0x02, 0x00, 0x00, 0x00, 0x55, 0x0b, 0x2b, 0x06,
                 0x01, 0x04, 0x01, 0x81, 0x78, 0x0b, 0x02, 0x01,
                 0x08, 0xfe, 0x0f, 0x00, 0x80, 0xc2, 0x04, 0x0a,
                 0x00, 0x27, 0x42, 0x42, 0x03, 0x00, 0x00, 0x02,
                 0x00, 0x03, 0xfe, 0x09, 0x00, 0x12, 0x0f, 0x01,
                 0x03, 0x6c, 0x00, 0x00, 0x10, 0xfe, 0x09, 0x00,
                 0x12, 0x0f, 0x03, 0x01, 0x00, 0x00, 0x00, 0x00,
                 0xfe, 0x06, 0x00, 0x80, 0xc2, 0x01, 0x00, 0x01,
                 0xfe, 0x07, 0x00, 0x80, 0xc2, 0x02, 0x03, 0x00,
                 0x01, 0xfe, 0x0e, 0x00, 0x80, 0xc2, 0x03, 0x00,
                 0x01, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
                 0x74, 0xfe, 0x05, 0x00, 0x80, 0x63, 0x02, 0x01,
                 0xfe, 0x05, 0x00, 0x80, 0x63, 0x03, 0x05, 0xfe,
                 0x0a, 0x00, 0x80, 0x63, 0x04, 0x0c, 0x80, 0x80,
                 0x44, 0x00, 0x00, 0xfe, 0x06, 0x00, 0x12, 0x0f,
                 0x04, 0x05, 0xee, 0x00, 0x00];

    let p = layer2::ethernet::Ethernet::new(&b);

    println!("{}", p);

    //loop {}
}

//0000011 000000010 00000000 1111000